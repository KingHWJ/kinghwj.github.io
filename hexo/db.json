{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1748930071605},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1748930101999},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1748930101892},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1748930102037},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1748930101948},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1748930102000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1748930101953},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1748930101963},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1748930101964},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1748930101988},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1748930102038},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1748930101968},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1748930102038},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1748930102039},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1748930101967},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1748930101971},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1748930102039},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1748930102039},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1748930102041},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1748930102040},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1748930102042},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1748930102041},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1748930102041},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1748930102040},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1748930102042},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1748930102041},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1748930102042},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1748930102044},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1748930102044},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1748930102043},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1748930102042},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1748930102044},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1748930102044},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1748930102045},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1748930102045},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1748930102043},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1748930102050},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1748930102050},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1748930102045},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1748930102050},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1748930102047},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1748930102051},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1748930101929},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1748930101933},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1748930102051},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1748930102051},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1748930101935},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1748930101949},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1748930101954},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1748930101957},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1748930102052},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1748930101959},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1748930101961},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1748930101970},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1748930101964},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1748930101960},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1748930101968},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1748930101943},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1748930101952},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1748930102004},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1748930102002},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1748930101972},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1748930101971},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1748930102037},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1748930101912},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1748930101996},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1748930101953},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1748930101951},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1748930101970},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1748930101966},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1748930101956},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1748930101975},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1748930102006},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1748930102007},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1748930102008},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1748930102007},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1748930102026},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1748930102037},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1748930102024},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1748930102025},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1748930102030},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1748930102028},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1748930102036},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1748930102033},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1748930101994},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1748930101991},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1748930101986},{"_id":"source/_posts/测试.md","hash":"c9baa6de7a00acea67c316e360d88601f18417ad","modified":1748931090441},{"_id":"source/_posts/Java语法-1.基础语法.md","hash":"25fcfdd1617ce27fc5e8f10781672c4bf02b10fe","modified":1748931090440},{"_id":"public/2025/06/03/测试/index.html","hash":"f1afe8a47934c8e0836e8278fe8d5fb00db81656","modified":1748932401409},{"_id":"public/2025/06/02/Java语法-1.基础语法/index.html","hash":"91078c28cface32dfeb9038a6cb69fe54d55478c","modified":1748932401409},{"_id":"public/2025/05/30/hello-world/index.html","hash":"a231c326502d504f6d6e8fccee07944250c5dc46","modified":1748932401409},{"_id":"public/index.html","hash":"2a5be0ac07277cd88287e2982fa5aacdf0246da6","modified":1748932401409},{"_id":"public/archives/index.html","hash":"cacab593838fd000006feb41b233b846f3f6a700","modified":1748932401409},{"_id":"public/archives/2025/index.html","hash":"a7440d5f6a62b6d696cbc3ce431c6e899a042845","modified":1748932401409},{"_id":"public/archives/2025/05/index.html","hash":"fc4f5c07ee662f8b21658cb063db22c5364b9ffe","modified":1748932401409},{"_id":"public/archives/2025/06/index.html","hash":"def66c0430f5961ae59a30a6c2f8dcef02caef8e","modified":1748932401409},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1748931187640},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1748931187640},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1748931187640},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1748931187640},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1748931187640},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1748931187640},{"_id":"source/_posts/测试2.md","hash":"8afb22a7d9c1f80d5a5ddc4d5f120728b70b1334","modified":1748932112308},{"_id":"public/2025/06/03/测试2/index.html","hash":"40749dd06fdb35e69a450dec6a0995684ba4cca9","modified":1748932401409}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-05-30T06:12:58.478Z","updated":"2025-06-03T05:54:31.605Z","comments":1,"layout":"post","photos":[],"_id":"cmbg432ro00007m1g7zofeje3","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Java基础","date":"2025-06-02T06:05:11.000Z","_content":"\n\n### 一、Java介绍\n\n### 二、变量和数据类型\n\n#### 1.变量的类型\n\n- 基本类型的变量\n- 引用类型的变量\n\n变量必须先定义，后使用，定义时可以先给一个初始值，如果没有初始值，java会给默认值\n\n#### 2.基本数据类型\n\n- 整数类型：byte，short，int，long\n- 浮点类型：float，double\n- 字符类型：char\n- 布尔类型：boolean\n\n##### 各数据类型占用字节数\n\n![image-20210513145429125](/Users/laohangdeche/Library/Application Support/typora-user-images/image-20210513145429125.png)\n\n#### 整型\n\n对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）\n各种整型能表示的最大范围如下：\n\n- byte：-128 ~ 127\n- short: -32768 ~ 32767\n- int: -2147483648 ~ 2147483647\n- long: -9223372036854775808 ~ 9223372036854775807\n\n**注意：**同一个数的不同进制的表示是完全相同的，long型需要在数据后面加上L\n\n#### 浮点型\n\n- 浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x10^2，也可以表示成1.2345x10^3，所以称为浮点数\n- 对于`float`类型，需要加上`f`后缀。\n- 浮点数可表示的范围非常大，`float`类型可最大表示3.4x10^38，而`double`类型可最大表示1.79x10^308\n\n#### 布尔类型\n\n布尔类型只有true和false两种类型，Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把`boolean`表示为4字节整数。\n\n#### 字符类型\n\n- 字符类型`char`表示一个字符，用单引号''括起来。Java的`char`类型除了可表示标准的ASCII外，还可以表示一个Unicode字符\n- java使用Unicode表示字符，要显示Unicode编码，可以将字符，赋值给int类型\n- 还可以直接用转义字符`\\u`+Unicode编码来表示一个字符\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        char a = 'A';\n        char zh = '中';\n        System.out.println(a);\n        System.out.println(zh);\n      \n        int a1 = a;\n        int a2 = zh;\n        System.out.println(a1);     // 65\n        System.out.println(a2);     // 20013\n      \n        char c3 = '\\u0041'; \t\t\t\t// 'A'，因为十六进制0041 = 十进制65\n        char c4 = '\\u4e2d'; \t\t\t\t// '中'，因为十六进制4e2d = 十进制20013\n    }\n}\n```\n\n### 3. 引用类型\n\n#### 3.1 字符串\n\n区别于单引号的字符，字符串是用双引号括起来的，引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。\n\n```java\nString s = \"hello\";\n```\n\n##### 3.1.1转义字符\n\n\\ 是转义字符，要表示该符号，需要两个\\\\\\表示一个\\字符\n\n**常见的转义字符**\n\n- `\\\"` 表示字符`\"`\n- `\\'` 表示字符`'`\n- `\\\\` 表示字符`\\`\n- `\\n` 表示换行符\n- `\\r` 表示回车符\n- `\\t` 表示Tab\n- `\\u####` 表示一个Unicode编码的字符\n\n##### 3.1.2 字符串拼接\n\njava中可以使用 + 连接任意字符串和数据类型，如果连接了其他数据类型，那么会先转换成字符串，再连接\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int age = 25;\n        String s = \"age is \" + age;\n        System.out.println(s); // age is25\n    }\n}\n```\n\n##### 3.1.3 多行字符串\n\n##### 3.1.4 不可变特性\n字符串的内容是不可变的，但指向是可变的\n\n#### 3.2 常量\n\n常量在第一次定义赋值后，就不能再次修改了，再次赋值会导致编译错误\n\n通常常量前会，用一个final修饰符，根据习惯，常量通常都为大写字母\n\n#### 3.3 var关键字\n\n有些时候，类型名字太长了，写起来比较麻烦，比如\n\n```java\nStringBuilder·s = new StringBuilder();\n```\n\n这个时候如果想省略变量类型，可以使用var关键字：\n\n```java\nvar sb = new StringBuilder();\n```\n\n### 4.变量的作用范围\n\n在Java中，变量的作用域一般在它所在的{}中，从定义处开始，到语句块结束，超出了作用域引用这些变量，编译器会报错\n\n### 5.null\n- 引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象\n- 注意要区分空值null和空字符串\"\"，空字符串是一个有效的字符串对象，它不等于null\n\n### 三、流程控制\n\n#### 1.if判断\n- 根据条件是true还是false，决定是否执行下面的某一段代码\n- 可以使用 if......else if......else来串联，else if较多时，要注意条件的顺序\n```java\npublic class IfSwitch {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入成绩：\");\n        int i = scanner.nextInt();\n        if(i >= 90){\n            System.out.println(\"优秀了\");\n        }else if(i >= 80)\n            System.out.println(\"良好\");\n        else if(i >= 60){\n            System.out.println(\"及格了\");\n        }else{\n            System.out.println(\"没及格\");\n        }\n}\n```\n**注意：** 当只有一行语句时，可以省略花括号，但不建议这么写，容易出错\n\n##### 判断引用类型相等\n- 在判断基本类型时，可以直接使用==，但是在判断引用类型的变量是否相等时，== 表示“该引用是否相等”，或者说，是否指向了同一个对象\n- 若想判断两个引用对象的内容是否相等，则需要用到equals() 方法\n\n```java\n\n// 判断引用类型是否相等\npublic class quoteEquals {\n    public static void main(String[] args) {\n        int i1 = 10;\n        int i2 = 10;\n        if(i1 == i2){\n            System.out.println(\"True\");\n        }else{\n            System.out.println(\"False\");\n        }\n\n        String s1 = \"hang\";\n        String s2 = \"HANG\".toLowerCase();\n        System.out.println(s1);     // hang\n        System.out.println(s2);     // hang\n\n        // different quote\n        if(s1 == s2){\n            System.out.println(\"same quote\");\n        }else{\n            System.out.println(\"different quote\");\n        }\n\n        // same word\n        if(s1.equals(s2)){\n            System.out.println(\"same word\");\n        }else{\n            System.out.println(\"different word\");\n        }\n    }\n\n```\n\n**注意：执行语句`s1.equals(s2)`时，如果变量`s1`为`null`，会报`NullPointerException`：**\n\n避免报空指针的错误，可以把一定不是null的对象放在前面，因为java中，任何对象都可以调用equals()方法\n\n#### 2.循环\n\n在计算机中，需要重复执行某一段代码，在条件满足时，重复执行；在条件不满足下，退出循环。\n\n##### 2.1 while循环\n\n```java\nwhile(条件){\n  循环体...\n}\n```\n\nwhile循环在执行时，先判断括号里的条件，如果为true，执行循环体内的代码。如果为false，直接跳到循环体末尾，执行下面的代码\n\n##### 死循环\n\n- 循环要有退出条件，如果条件永远为true，那整个循环语句便会一直运行下去，导致占用100%的CPU资源，导致电脑运行缓慢\n\n```java\n// 死循环\nint i = 100;\nwhile(i > 0){\n  System.out.println(i):\n}\n```\n\n##### 2.2 do while 循环\n\n- while 循环是先判断条件，再执行循环体\n- do while 循环是先执行一次循环体，再判断条件，即至少会执行一次\n\n```java\n// do while 循环\npublic class doWhile {\n    public static void main(String[] args) {\n        int i = 1;\n        int sum = 0;\n        do {\n            sum += i;\n            i++;\n        }while (i<= 100);\n\n        System.out.println(sum);\n        \n        // do while 至少执行一次循环体内的代码\n        int n = 1;\n        int s = 0;\n        do{\n            s += n;\n            i++;\n        }while (n>1);\n        System.out.println(s);      // 只加一次，输出1\n    }\n}\n```\n\n##### 2.3 for 循环\n\n`for`循环的功能非常强大，它使用计数器实现循环。`for`循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为`i`\n\n```java\n// for循环\npublic class forLoop {\n    public static void main(String[] args) {\n        int sum = 0;\n        for(int i = 1;i<=100;i++){\n            sum += i;\n        }\n        System.out.println(sum);    // 5050\n    }\n}\n```\n\n##### for each 循环\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] ns = { 1, 4, 9, 16, 25 };\n        for (int n : ns) {\n            System.out.println(n);\n        }\n    }\n}\n```\n\n##### 练习：利用for循环计算圆周率\n\n```java\npublic class circlePi {\n    public static void main(String[] args) {\n        // 圆周率π可以使用公式计算：\n        double pi = 0;\n        for (double i = 1; i <= 3000; i++) {\n            if (i% 2 != 0) {\n                pi = pi + 1 / (2 * i -1);\n            } else {\n                pi = pi - 1 / (2 * i - 1);\n            }\n        }\n        pi = pi * 4;\n        System.out.println(pi);\n    }\n}\n```\n\n#### 3.break和continue\n\n在for 循环 和 while 循环中，可以利用这两个关键字，中断或跳过某段程序\n\n- break，中断整个循环，继续执行循环下方的代码，break语句总是跳出最近的一层循环\n- continue，跳过当前循环，继续执行下一次循环\n\n```java\npublic class breakAndContinue {\n    public static void main(String[] args) {\n        // break，终止循环\n        int sum = 0;\n        for(int i = 1;i<= 100;i++){\n            // 只计算到50\n            if(i>50){\n                break;\n            }\n            sum += i ;\n        }\n        System.out.println(sum);\n\n        // continue，跳过当前循环\n        int total = 0;\n        for (int i = 1; i <= 100; i++) {\n            // 只计算奇数,跳过偶数\n            if(i%2==0){\n                continue;\n            }\n            total += i;\n        }\n        System.out.println(total);\n    }\n}\n```\n\n#### 4.switch选择\n\nswitch，可以根据条件的具体结果，分别去执行不同的分支\n\n```java\n// switch语法\npublic class SwitchTest {\n    public static void main(String[] args) {\n        int option = 111;\n        switch (option) {\n            case 1:\n                System.out.println(\"select 1\");\n                break;\n            case 2:\n                System.out.println(\"select 2\");\n                break;\n            case 3:\n                System.out.println(\"select 3\");\n                break;\n            default:\n                System.out.println(\"选错了\");\n                break;\n        }\n    }\n}\n```\n\n**注意**\n\n- case后面没有花括号{}\n- 每个case需要添加break，忘记写break，语句会穿透下去，直到遇到break或者执行到最后一句\n\n##### java12 中switch表达式的新写法\n\n- 使用箭头语法，类似lambda表达式\n- 可以不需要添加break语句\n- case 多个条件可以写在一行\n- switch语句可以用yield 生成返回值，这个时候，switch块最后要加分号\n- 箭头语法下，如果条件大于一条，要用{}括起来\n\n```java\n\t\t\t\tString fruit = \"apple\";\n        switch (fruit){\n            case \"apple\" -> System.out.println(\"select apple\");\n            case \"pear\" -> System.out.println(\"select pear\");\n            case \"mongo\",\"test\" -> {\n                System.out.println(\"select mango\");\n                System.out.println(\"good choice\");\n            }\n            default -> System.out.println(\"no fruit select\");\n        }\n\n// 使用yield 生成返回值\n\t\t\t\tString fruit1 = \"mongo\";\n        int num = switch (fruit1){\n            case \"apple\" -> 1;\n            case \"pear\" -> 2;\n            case \"mongo\",\"test\" -> {\n                System.out.println(\"select mango\");\n                System.out.println(\"good choice\");\n                yield 3;\n            }\n            default -> 0;\n        };\n        System.out.println(num);\n    }\n```\n\n\n\n\n\n\n### 四、数组\n\n#### 1.数组的三种定义方法\n\n- 先声明，再分配空间，再赋值\n- 先声明并分配空间，再赋值\n- 声明并分配空间然后赋值\n\n```java\npublic class aArray {\n    public static void main(String[] args) {\n        System.out.println(\"创建数组的三种方式：\");\n    \n        System.out.println(\"方式 1\");\n        int[] array1 ;\n        array1 = new int[5];      // 指定数组大小和类型，初始值都是0 或false 或null\n        for (int i = 0; i < 5; i++){\n            array1[i] = i * 10;  //赋值\n        }\n        \n        System.out.println(\"\\n方式2\");\n        int[] array2 = new int[5];   \n        for (int i = 0; i < 5; i++){\n            array1[i] = i * 10;  //赋值\n        }\n        System.out.println(\"\\n方式3\");\n        int[] array3 = {1, 2, 3, 4, 5};     // 不指定具体大小，直接初始化数组的值，方式2的简化方法，不需要new int[] 直接添加{}\n\n        System.out.println(\"for each 遍历数组\");\n        \n    }\n```\n#### 2.数组特点\n- Java数组一旦创建，不能修改大小\n- 数组创建后会被分配默认值，整型为0，浮点型为0.0，布尔型为false，*对象为null*\n\n#### 3.数组的基本使用\n##### 3.1 索引\n若要使用数组，可以根据索引使用。数组索引从0开始，列如10个元素的开始，索引为0~9\n数组是引用类型，如果索引超出最大范围，则会报错\n\n##### 3.2 遍历\n```java\nfor (int i = 0; i < array.length; i++) {\n    System.out.println(array[i]);\n}\n        \nSystem.out.println(\"for each 遍历数组\");\nfor (int num : array2) {\n    System.out.println(num);\n}\n```\n##### 3.3 数组的本质\n```java\n int[] array1;\n array1 = new int[]{1,2,3,4,5};\n System.out.println(array1);     // [I@f6f4d33\n array1 = new int[]{9,8,1};\n System.out.println(array1);     // [I@23fc625e\n```\n数组是引用类型，通过变量名指向数组，如果有新数组，可以用这个变量名再指向新的数组\n\n##### 3.4 排序\n排序方法有很多种，例如，冒泡排序，快速排序，插入排序等等，这部分涉及到算法\n在java中利用Arrays.sort()方法就可以排序\n```java\nint[] array = {10, 6, 13, 2, 4, 1, 54, 12};\nint[] array2 = {111, 21, 31, 14, 16, -2, -54, 102};\nSystem.out.println(\"排序前：\");\nSystem.out.println(array);\nSystem.out.println(Arrays.toString(array));\n\nArrays.sort(array);\nSystem.out.println(\"排序后：\");\nSystem.out.println(array);\nSystem.out.println(Arrays.toString(array));\n```\n**注意:该方法是修改了数组本身**\n#### 4.多维数组\n\n列如二维数组，就是数组中的数组，最外层的一个数组中，每一个元素都是一个数组\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[][] ns = {\n            { 1, 2, 3, 4 },\n            { 5, 6, 7, 8 },\n            { 9, 10, 11, 12 }\n        };\n        System.out.println(ns.length); // 3\n    }\n}\n```\n![34c2c5919f0c554c3f580ec0309ae484.png](evernotecid://4110DA82-EE74-493A-AC6E-7D2C24DDBBB9/appyinxiangcom/27405091/ENResource/p6)\n\n","source":"_posts/Java语法-1.基础语法.md","raw":"---\ntitle: Java基础\ndate: 2025-06-02 14:05:11\ntags:\n---\n\n\n### 一、Java介绍\n\n### 二、变量和数据类型\n\n#### 1.变量的类型\n\n- 基本类型的变量\n- 引用类型的变量\n\n变量必须先定义，后使用，定义时可以先给一个初始值，如果没有初始值，java会给默认值\n\n#### 2.基本数据类型\n\n- 整数类型：byte，short，int，long\n- 浮点类型：float，double\n- 字符类型：char\n- 布尔类型：boolean\n\n##### 各数据类型占用字节数\n\n![image-20210513145429125](/Users/laohangdeche/Library/Application Support/typora-user-images/image-20210513145429125.png)\n\n#### 整型\n\n对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）\n各种整型能表示的最大范围如下：\n\n- byte：-128 ~ 127\n- short: -32768 ~ 32767\n- int: -2147483648 ~ 2147483647\n- long: -9223372036854775808 ~ 9223372036854775807\n\n**注意：**同一个数的不同进制的表示是完全相同的，long型需要在数据后面加上L\n\n#### 浮点型\n\n- 浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x10^2，也可以表示成1.2345x10^3，所以称为浮点数\n- 对于`float`类型，需要加上`f`后缀。\n- 浮点数可表示的范围非常大，`float`类型可最大表示3.4x10^38，而`double`类型可最大表示1.79x10^308\n\n#### 布尔类型\n\n布尔类型只有true和false两种类型，Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把`boolean`表示为4字节整数。\n\n#### 字符类型\n\n- 字符类型`char`表示一个字符，用单引号''括起来。Java的`char`类型除了可表示标准的ASCII外，还可以表示一个Unicode字符\n- java使用Unicode表示字符，要显示Unicode编码，可以将字符，赋值给int类型\n- 还可以直接用转义字符`\\u`+Unicode编码来表示一个字符\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        char a = 'A';\n        char zh = '中';\n        System.out.println(a);\n        System.out.println(zh);\n      \n        int a1 = a;\n        int a2 = zh;\n        System.out.println(a1);     // 65\n        System.out.println(a2);     // 20013\n      \n        char c3 = '\\u0041'; \t\t\t\t// 'A'，因为十六进制0041 = 十进制65\n        char c4 = '\\u4e2d'; \t\t\t\t// '中'，因为十六进制4e2d = 十进制20013\n    }\n}\n```\n\n### 3. 引用类型\n\n#### 3.1 字符串\n\n区别于单引号的字符，字符串是用双引号括起来的，引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。\n\n```java\nString s = \"hello\";\n```\n\n##### 3.1.1转义字符\n\n\\ 是转义字符，要表示该符号，需要两个\\\\\\表示一个\\字符\n\n**常见的转义字符**\n\n- `\\\"` 表示字符`\"`\n- `\\'` 表示字符`'`\n- `\\\\` 表示字符`\\`\n- `\\n` 表示换行符\n- `\\r` 表示回车符\n- `\\t` 表示Tab\n- `\\u####` 表示一个Unicode编码的字符\n\n##### 3.1.2 字符串拼接\n\njava中可以使用 + 连接任意字符串和数据类型，如果连接了其他数据类型，那么会先转换成字符串，再连接\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int age = 25;\n        String s = \"age is \" + age;\n        System.out.println(s); // age is25\n    }\n}\n```\n\n##### 3.1.3 多行字符串\n\n##### 3.1.4 不可变特性\n字符串的内容是不可变的，但指向是可变的\n\n#### 3.2 常量\n\n常量在第一次定义赋值后，就不能再次修改了，再次赋值会导致编译错误\n\n通常常量前会，用一个final修饰符，根据习惯，常量通常都为大写字母\n\n#### 3.3 var关键字\n\n有些时候，类型名字太长了，写起来比较麻烦，比如\n\n```java\nStringBuilder·s = new StringBuilder();\n```\n\n这个时候如果想省略变量类型，可以使用var关键字：\n\n```java\nvar sb = new StringBuilder();\n```\n\n### 4.变量的作用范围\n\n在Java中，变量的作用域一般在它所在的{}中，从定义处开始，到语句块结束，超出了作用域引用这些变量，编译器会报错\n\n### 5.null\n- 引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象\n- 注意要区分空值null和空字符串\"\"，空字符串是一个有效的字符串对象，它不等于null\n\n### 三、流程控制\n\n#### 1.if判断\n- 根据条件是true还是false，决定是否执行下面的某一段代码\n- 可以使用 if......else if......else来串联，else if较多时，要注意条件的顺序\n```java\npublic class IfSwitch {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"请输入成绩：\");\n        int i = scanner.nextInt();\n        if(i >= 90){\n            System.out.println(\"优秀了\");\n        }else if(i >= 80)\n            System.out.println(\"良好\");\n        else if(i >= 60){\n            System.out.println(\"及格了\");\n        }else{\n            System.out.println(\"没及格\");\n        }\n}\n```\n**注意：** 当只有一行语句时，可以省略花括号，但不建议这么写，容易出错\n\n##### 判断引用类型相等\n- 在判断基本类型时，可以直接使用==，但是在判断引用类型的变量是否相等时，== 表示“该引用是否相等”，或者说，是否指向了同一个对象\n- 若想判断两个引用对象的内容是否相等，则需要用到equals() 方法\n\n```java\n\n// 判断引用类型是否相等\npublic class quoteEquals {\n    public static void main(String[] args) {\n        int i1 = 10;\n        int i2 = 10;\n        if(i1 == i2){\n            System.out.println(\"True\");\n        }else{\n            System.out.println(\"False\");\n        }\n\n        String s1 = \"hang\";\n        String s2 = \"HANG\".toLowerCase();\n        System.out.println(s1);     // hang\n        System.out.println(s2);     // hang\n\n        // different quote\n        if(s1 == s2){\n            System.out.println(\"same quote\");\n        }else{\n            System.out.println(\"different quote\");\n        }\n\n        // same word\n        if(s1.equals(s2)){\n            System.out.println(\"same word\");\n        }else{\n            System.out.println(\"different word\");\n        }\n    }\n\n```\n\n**注意：执行语句`s1.equals(s2)`时，如果变量`s1`为`null`，会报`NullPointerException`：**\n\n避免报空指针的错误，可以把一定不是null的对象放在前面，因为java中，任何对象都可以调用equals()方法\n\n#### 2.循环\n\n在计算机中，需要重复执行某一段代码，在条件满足时，重复执行；在条件不满足下，退出循环。\n\n##### 2.1 while循环\n\n```java\nwhile(条件){\n  循环体...\n}\n```\n\nwhile循环在执行时，先判断括号里的条件，如果为true，执行循环体内的代码。如果为false，直接跳到循环体末尾，执行下面的代码\n\n##### 死循环\n\n- 循环要有退出条件，如果条件永远为true，那整个循环语句便会一直运行下去，导致占用100%的CPU资源，导致电脑运行缓慢\n\n```java\n// 死循环\nint i = 100;\nwhile(i > 0){\n  System.out.println(i):\n}\n```\n\n##### 2.2 do while 循环\n\n- while 循环是先判断条件，再执行循环体\n- do while 循环是先执行一次循环体，再判断条件，即至少会执行一次\n\n```java\n// do while 循环\npublic class doWhile {\n    public static void main(String[] args) {\n        int i = 1;\n        int sum = 0;\n        do {\n            sum += i;\n            i++;\n        }while (i<= 100);\n\n        System.out.println(sum);\n        \n        // do while 至少执行一次循环体内的代码\n        int n = 1;\n        int s = 0;\n        do{\n            s += n;\n            i++;\n        }while (n>1);\n        System.out.println(s);      // 只加一次，输出1\n    }\n}\n```\n\n##### 2.3 for 循环\n\n`for`循环的功能非常强大，它使用计数器实现循环。`for`循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为`i`\n\n```java\n// for循环\npublic class forLoop {\n    public static void main(String[] args) {\n        int sum = 0;\n        for(int i = 1;i<=100;i++){\n            sum += i;\n        }\n        System.out.println(sum);    // 5050\n    }\n}\n```\n\n##### for each 循环\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] ns = { 1, 4, 9, 16, 25 };\n        for (int n : ns) {\n            System.out.println(n);\n        }\n    }\n}\n```\n\n##### 练习：利用for循环计算圆周率\n\n```java\npublic class circlePi {\n    public static void main(String[] args) {\n        // 圆周率π可以使用公式计算：\n        double pi = 0;\n        for (double i = 1; i <= 3000; i++) {\n            if (i% 2 != 0) {\n                pi = pi + 1 / (2 * i -1);\n            } else {\n                pi = pi - 1 / (2 * i - 1);\n            }\n        }\n        pi = pi * 4;\n        System.out.println(pi);\n    }\n}\n```\n\n#### 3.break和continue\n\n在for 循环 和 while 循环中，可以利用这两个关键字，中断或跳过某段程序\n\n- break，中断整个循环，继续执行循环下方的代码，break语句总是跳出最近的一层循环\n- continue，跳过当前循环，继续执行下一次循环\n\n```java\npublic class breakAndContinue {\n    public static void main(String[] args) {\n        // break，终止循环\n        int sum = 0;\n        for(int i = 1;i<= 100;i++){\n            // 只计算到50\n            if(i>50){\n                break;\n            }\n            sum += i ;\n        }\n        System.out.println(sum);\n\n        // continue，跳过当前循环\n        int total = 0;\n        for (int i = 1; i <= 100; i++) {\n            // 只计算奇数,跳过偶数\n            if(i%2==0){\n                continue;\n            }\n            total += i;\n        }\n        System.out.println(total);\n    }\n}\n```\n\n#### 4.switch选择\n\nswitch，可以根据条件的具体结果，分别去执行不同的分支\n\n```java\n// switch语法\npublic class SwitchTest {\n    public static void main(String[] args) {\n        int option = 111;\n        switch (option) {\n            case 1:\n                System.out.println(\"select 1\");\n                break;\n            case 2:\n                System.out.println(\"select 2\");\n                break;\n            case 3:\n                System.out.println(\"select 3\");\n                break;\n            default:\n                System.out.println(\"选错了\");\n                break;\n        }\n    }\n}\n```\n\n**注意**\n\n- case后面没有花括号{}\n- 每个case需要添加break，忘记写break，语句会穿透下去，直到遇到break或者执行到最后一句\n\n##### java12 中switch表达式的新写法\n\n- 使用箭头语法，类似lambda表达式\n- 可以不需要添加break语句\n- case 多个条件可以写在一行\n- switch语句可以用yield 生成返回值，这个时候，switch块最后要加分号\n- 箭头语法下，如果条件大于一条，要用{}括起来\n\n```java\n\t\t\t\tString fruit = \"apple\";\n        switch (fruit){\n            case \"apple\" -> System.out.println(\"select apple\");\n            case \"pear\" -> System.out.println(\"select pear\");\n            case \"mongo\",\"test\" -> {\n                System.out.println(\"select mango\");\n                System.out.println(\"good choice\");\n            }\n            default -> System.out.println(\"no fruit select\");\n        }\n\n// 使用yield 生成返回值\n\t\t\t\tString fruit1 = \"mongo\";\n        int num = switch (fruit1){\n            case \"apple\" -> 1;\n            case \"pear\" -> 2;\n            case \"mongo\",\"test\" -> {\n                System.out.println(\"select mango\");\n                System.out.println(\"good choice\");\n                yield 3;\n            }\n            default -> 0;\n        };\n        System.out.println(num);\n    }\n```\n\n\n\n\n\n\n### 四、数组\n\n#### 1.数组的三种定义方法\n\n- 先声明，再分配空间，再赋值\n- 先声明并分配空间，再赋值\n- 声明并分配空间然后赋值\n\n```java\npublic class aArray {\n    public static void main(String[] args) {\n        System.out.println(\"创建数组的三种方式：\");\n    \n        System.out.println(\"方式 1\");\n        int[] array1 ;\n        array1 = new int[5];      // 指定数组大小和类型，初始值都是0 或false 或null\n        for (int i = 0; i < 5; i++){\n            array1[i] = i * 10;  //赋值\n        }\n        \n        System.out.println(\"\\n方式2\");\n        int[] array2 = new int[5];   \n        for (int i = 0; i < 5; i++){\n            array1[i] = i * 10;  //赋值\n        }\n        System.out.println(\"\\n方式3\");\n        int[] array3 = {1, 2, 3, 4, 5};     // 不指定具体大小，直接初始化数组的值，方式2的简化方法，不需要new int[] 直接添加{}\n\n        System.out.println(\"for each 遍历数组\");\n        \n    }\n```\n#### 2.数组特点\n- Java数组一旦创建，不能修改大小\n- 数组创建后会被分配默认值，整型为0，浮点型为0.0，布尔型为false，*对象为null*\n\n#### 3.数组的基本使用\n##### 3.1 索引\n若要使用数组，可以根据索引使用。数组索引从0开始，列如10个元素的开始，索引为0~9\n数组是引用类型，如果索引超出最大范围，则会报错\n\n##### 3.2 遍历\n```java\nfor (int i = 0; i < array.length; i++) {\n    System.out.println(array[i]);\n}\n        \nSystem.out.println(\"for each 遍历数组\");\nfor (int num : array2) {\n    System.out.println(num);\n}\n```\n##### 3.3 数组的本质\n```java\n int[] array1;\n array1 = new int[]{1,2,3,4,5};\n System.out.println(array1);     // [I@f6f4d33\n array1 = new int[]{9,8,1};\n System.out.println(array1);     // [I@23fc625e\n```\n数组是引用类型，通过变量名指向数组，如果有新数组，可以用这个变量名再指向新的数组\n\n##### 3.4 排序\n排序方法有很多种，例如，冒泡排序，快速排序，插入排序等等，这部分涉及到算法\n在java中利用Arrays.sort()方法就可以排序\n```java\nint[] array = {10, 6, 13, 2, 4, 1, 54, 12};\nint[] array2 = {111, 21, 31, 14, 16, -2, -54, 102};\nSystem.out.println(\"排序前：\");\nSystem.out.println(array);\nSystem.out.println(Arrays.toString(array));\n\nArrays.sort(array);\nSystem.out.println(\"排序后：\");\nSystem.out.println(array);\nSystem.out.println(Arrays.toString(array));\n```\n**注意:该方法是修改了数组本身**\n#### 4.多维数组\n\n列如二维数组，就是数组中的数组，最外层的一个数组中，每一个元素都是一个数组\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int[][] ns = {\n            { 1, 2, 3, 4 },\n            { 5, 6, 7, 8 },\n            { 9, 10, 11, 12 }\n        };\n        System.out.println(ns.length); // 3\n    }\n}\n```\n![34c2c5919f0c554c3f580ec0309ae484.png](evernotecid://4110DA82-EE74-493A-AC6E-7D2C24DDBBB9/appyinxiangcom/27405091/ENResource/p6)\n\n","slug":"Java语法-1.基础语法","published":1,"updated":"2025-06-03T06:11:30.440Z","comments":1,"layout":"post","photos":[],"_id":"cmbg4h16o0000b31g1qpw4x7g","content":"<h3 id=\"一、Java介绍\"><a href=\"#一、Java介绍\" class=\"headerlink\" title=\"一、Java介绍\"></a>一、Java介绍</h3><h3 id=\"二、变量和数据类型\"><a href=\"#二、变量和数据类型\" class=\"headerlink\" title=\"二、变量和数据类型\"></a>二、变量和数据类型</h3><h4 id=\"1-变量的类型\"><a href=\"#1-变量的类型\" class=\"headerlink\" title=\"1.变量的类型\"></a>1.变量的类型</h4><ul>\n<li>基本类型的变量</li>\n<li>引用类型的变量</li>\n</ul>\n<p>变量必须先定义，后使用，定义时可以先给一个初始值，如果没有初始值，java会给默认值</p>\n<h4 id=\"2-基本数据类型\"><a href=\"#2-基本数据类型\" class=\"headerlink\" title=\"2.基本数据类型\"></a>2.基本数据类型</h4><ul>\n<li>整数类型：byte，short，int，long</li>\n<li>浮点类型：float，double</li>\n<li>字符类型：char</li>\n<li>布尔类型：boolean</li>\n</ul>\n<h5 id=\"各数据类型占用字节数\"><a href=\"#各数据类型占用字节数\" class=\"headerlink\" title=\"各数据类型占用字节数\"></a>各数据类型占用字节数</h5><p>![image-20210513145429125](&#x2F;Users&#x2F;laohangdeche&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210513145429125.png)</p>\n<h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）<br>各种整型能表示的最大范围如下：</p>\n<ul>\n<li>byte：-128 ~ 127</li>\n<li>short: -32768 ~ 32767</li>\n<li>int: -2147483648 ~ 2147483647</li>\n<li>long: -9223372036854775808 ~ 9223372036854775807</li>\n</ul>\n<p><strong>注意：</strong>同一个数的不同进制的表示是完全相同的，long型需要在数据后面加上L</p>\n<h4 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h4><ul>\n<li>浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x10^2，也可以表示成1.2345x10^3，所以称为浮点数</li>\n<li>对于<code>float</code>类型，需要加上<code>f</code>后缀。</li>\n<li>浮点数可表示的范围非常大，<code>float</code>类型可最大表示3.4x10^38，而<code>double</code>类型可最大表示1.79x10^308</li>\n</ul>\n<h4 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h4><p>布尔类型只有true和false两种类型，Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把<code>boolean</code>表示为4字节整数。</p>\n<h4 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h4><ul>\n<li>字符类型<code>char</code>表示一个字符，用单引号’’括起来。Java的<code>char</code>类型除了可表示标准的ASCII外，还可以表示一个Unicode字符</li>\n<li>java使用Unicode表示字符，要显示Unicode编码，可以将字符，赋值给int类型</li>\n<li>还可以直接用转义字符<code>\\u</code>+Unicode编码来表示一个字符</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">zh</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;中&#x27;</span>;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(zh);</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> zh;</span><br><span class=\"line\">        System.out.println(a1);     <span class=\"comment\">// 65</span></span><br><span class=\"line\">        System.out.println(a2);     <span class=\"comment\">// 20013</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0041&#x27;</span>; \t\t\t\t<span class=\"comment\">// &#x27;A&#x27;，因为十六进制0041 = 十进制65</span></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u4e2d&#x27;</span>; \t\t\t\t<span class=\"comment\">// &#x27;中&#x27;，因为十六进制4e2d = 十进制20013</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-引用类型\"><a href=\"#3-引用类型\" class=\"headerlink\" title=\"3. 引用类型\"></a>3. 引用类型</h3><h4 id=\"3-1-字符串\"><a href=\"#3-1-字符串\" class=\"headerlink\" title=\"3.1 字符串\"></a>3.1 字符串</h4><p>区别于单引号的字符，字符串是用双引号括起来的，引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-1转义字符\"><a href=\"#3-1-1转义字符\" class=\"headerlink\" title=\"3.1.1转义字符\"></a>3.1.1转义字符</h5><p>\\ 是转义字符，要表示该符号，需要两个\\\\表示一个\\字符</p>\n<p><strong>常见的转义字符</strong></p>\n<ul>\n<li><code>\\&quot;</code> 表示字符<code>&quot;</code></li>\n<li><code>\\&#39;</code> 表示字符<code>&#39;</code></li>\n<li><code>\\\\</code> 表示字符<code>\\</code></li>\n<li><code>\\n</code> 表示换行符</li>\n<li><code>\\r</code> 表示回车符</li>\n<li><code>\\t</code> 表示Tab</li>\n<li><code>\\u####</code> 表示一个Unicode编码的字符</li>\n</ul>\n<h5 id=\"3-1-2-字符串拼接\"><a href=\"#3-1-2-字符串拼接\" class=\"headerlink\" title=\"3.1.2 字符串拼接\"></a>3.1.2 字符串拼接</h5><p>java中可以使用 + 连接任意字符串和数据类型，如果连接了其他数据类型，那么会先转换成字符串，再连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;age is &quot;</span> + age;</span><br><span class=\"line\">        System.out.println(s); <span class=\"comment\">// age is25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-3-多行字符串\"><a href=\"#3-1-3-多行字符串\" class=\"headerlink\" title=\"3.1.3 多行字符串\"></a>3.1.3 多行字符串</h5><h5 id=\"3-1-4-不可变特性\"><a href=\"#3-1-4-不可变特性\" class=\"headerlink\" title=\"3.1.4 不可变特性\"></a>3.1.4 不可变特性</h5><p>字符串的内容是不可变的，但指向是可变的</p>\n<h4 id=\"3-2-常量\"><a href=\"#3-2-常量\" class=\"headerlink\" title=\"3.2 常量\"></a>3.2 常量</h4><p>常量在第一次定义赋值后，就不能再次修改了，再次赋值会导致编译错误</p>\n<p>通常常量前会，用一个final修饰符，根据习惯，常量通常都为大写字母</p>\n<h4 id=\"3-3-var关键字\"><a href=\"#3-3-var关键字\" class=\"headerlink\" title=\"3.3 var关键字\"></a>3.3 var关键字</h4><p>有些时候，类型名字太长了，写起来比较麻烦，比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder·s = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这个时候如果想省略变量类型，可以使用var关键字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-变量的作用范围\"><a href=\"#4-变量的作用范围\" class=\"headerlink\" title=\"4.变量的作用范围\"></a>4.变量的作用范围</h3><p>在Java中，变量的作用域一般在它所在的{}中，从定义处开始，到语句块结束，超出了作用域引用这些变量，编译器会报错</p>\n<h3 id=\"5-null\"><a href=\"#5-null\" class=\"headerlink\" title=\"5.null\"></a>5.null</h3><ul>\n<li>引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象</li>\n<li>注意要区分空值null和空字符串””，空字符串是一个有效的字符串对象，它不等于null</li>\n</ul>\n<h3 id=\"三、流程控制\"><a href=\"#三、流程控制\" class=\"headerlink\" title=\"三、流程控制\"></a>三、流程控制</h3><h4 id=\"1-if判断\"><a href=\"#1-if判断\" class=\"headerlink\" title=\"1.if判断\"></a>1.if判断</h4><ul>\n<li>根据条件是true还是false，决定是否执行下面的某一段代码</li>\n<li>可以使用 if……else if……else来串联，else if较多时，要注意条件的顺序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfSwitch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入成绩：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀了&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">80</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格了&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没及格&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>注意：</strong> 当只有一行语句时，可以省略花括号，但不建议这么写，容易出错</li>\n</ul>\n<h5 id=\"判断引用类型相等\"><a href=\"#判断引用类型相等\" class=\"headerlink\" title=\"判断引用类型相等\"></a>判断引用类型相等</h5><ul>\n<li>在判断基本类型时，可以直接使用&#x3D;&#x3D;，但是在判断引用类型的变量是否相等时，&#x3D;&#x3D; 表示“该引用是否相等”，或者说，是否指向了同一个对象</li>\n<li>若想判断两个引用对象的内容是否相等，则需要用到equals() 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断引用类型是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">quoteEquals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i1 == i2)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;False&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hang&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;HANG&quot;</span>.toLowerCase();</span><br><span class=\"line\">        System.out.println(s1);     <span class=\"comment\">// hang</span></span><br><span class=\"line\">        System.out.println(s2);     <span class=\"comment\">// hang</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// different quote</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1 == s2)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;same quote&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;different quote&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// same word</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1.equals(s2))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;same word&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;different word&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：执行语句<code>s1.equals(s2)</code>时，如果变量<code>s1</code>为<code>null</code>，会报<code>NullPointerException</code>：</strong></p>\n<p>避免报空指针的错误，可以把一定不是null的对象放在前面，因为java中，任何对象都可以调用equals()方法</p>\n<h4 id=\"2-循环\"><a href=\"#2-循环\" class=\"headerlink\" title=\"2.循环\"></a>2.循环</h4><p>在计算机中，需要重复执行某一段代码，在条件满足时，重复执行；在条件不满足下，退出循环。</p>\n<h5 id=\"2-1-while循环\"><a href=\"#2-1-while循环\" class=\"headerlink\" title=\"2.1 while循环\"></a>2.1 while循环</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(条件)&#123;</span><br><span class=\"line\">  循环体...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>while循环在执行时，先判断括号里的条件，如果为true，执行循环体内的代码。如果为false，直接跳到循环体末尾，执行下面的代码</p>\n<h5 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a>死循环</h5><ul>\n<li>循环要有退出条件，如果条件永远为true，那整个循环语句便会一直运行下去，导致占用100%的CPU资源，导致电脑运行缓慢</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 死循环</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  System.out.println(i):</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-do-while-循环\"><a href=\"#2-2-do-while-循环\" class=\"headerlink\" title=\"2.2 do while 循环\"></a>2.2 do while 循环</h5><ul>\n<li>while 循环是先判断条件，再执行循环体</li>\n<li>do while 循环是先执行一次循环体，再判断条件，即至少会执行一次</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// do while 循环</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">doWhile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (i&lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// do while 至少执行一次循环体内的代码</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            s += n;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (n&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(s);      <span class=\"comment\">// 只加一次，输出1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-for-循环\"><a href=\"#2-3-for-循环\" class=\"headerlink\" title=\"2.3 for 循环\"></a>2.3 for 循环</h5><p><code>for</code>循环的功能非常强大，它使用计数器实现循环。<code>for</code>循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为<code>i</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for循环</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">forLoop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);    <span class=\"comment\">// 5050</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-each-循环\"><a href=\"#for-each-循环\" class=\"headerlink\" title=\"for each 循环\"></a>for each 循环</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ns = &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n : ns) &#123;</span><br><span class=\"line\">            System.out.println(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"练习：利用for循环计算圆周率\"><a href=\"#练习：利用for循环计算圆周率\" class=\"headerlink\" title=\"练习：利用for循环计算圆周率\"></a>练习：利用for循环计算圆周率</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">circlePi</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 圆周率π可以使用公式计算：</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i% <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pi = pi + <span class=\"number\">1</span> / (<span class=\"number\">2</span> * i -<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pi = pi - <span class=\"number\">1</span> / (<span class=\"number\">2</span> * i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pi = pi * <span class=\"number\">4</span>;</span><br><span class=\"line\">        System.out.println(pi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-break和continue\"><a href=\"#3-break和continue\" class=\"headerlink\" title=\"3.break和continue\"></a>3.break和continue</h4><p>在for 循环 和 while 循环中，可以利用这两个关键字，中断或跳过某段程序</p>\n<ul>\n<li>break，中断整个循环，继续执行循环下方的代码，break语句总是跳出最近的一层循环</li>\n<li>continue，跳过当前循环，继续执行下一次循环</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">breakAndContinue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// break，终止循环</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;= <span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只计算到50</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum += i ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// continue，跳过当前循环</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只计算奇数,跳过偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-switch选择\"><a href=\"#4-switch选择\" class=\"headerlink\" title=\"4.switch选择\"></a>4.switch选择</h4><p>switch，可以根据条件的具体结果，分别去执行不同的分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// switch语法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 1&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 2&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 3&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;选错了&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>case后面没有花括号{}</li>\n<li>每个case需要添加break，忘记写break，语句会穿透下去，直到遇到break或者执行到最后一句</li>\n</ul>\n<h5 id=\"java12-中switch表达式的新写法\"><a href=\"#java12-中switch表达式的新写法\" class=\"headerlink\" title=\"java12 中switch表达式的新写法\"></a>java12 中switch表达式的新写法</h5><ul>\n<li>使用箭头语法，类似lambda表达式</li>\n<li>可以不需要添加break语句</li>\n<li>case 多个条件可以写在一行</li>\n<li>switch语句可以用yield 生成返回值，这个时候，switch块最后要加分号</li>\n<li>箭头语法下，如果条件大于一条，要用{}括起来</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;apple&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (fruit)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span> -&gt; System.out.println(<span class=\"string\">&quot;select apple&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;pear&quot;</span> -&gt; System.out.println(<span class=\"string\">&quot;select pear&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;mongo&quot;</span>,<span class=\"string\">&quot;test&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select mango&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;good choice&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;no fruit select&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用yield 生成返回值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">fruit1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mongo&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (fruit1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span> -&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;pear&quot;</span> -&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;mongo&quot;</span>,<span class=\"string\">&quot;test&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select mango&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;good choice&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"四、数组\"><a href=\"#四、数组\" class=\"headerlink\" title=\"四、数组\"></a>四、数组</h3><h4 id=\"1-数组的三种定义方法\"><a href=\"#1-数组的三种定义方法\" class=\"headerlink\" title=\"1.数组的三种定义方法\"></a>1.数组的三种定义方法</h4><ul>\n<li>先声明，再分配空间，再赋值</li>\n<li>先声明并分配空间，再赋值</li>\n<li>声明并分配空间然后赋值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">aArray</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建数组的三种方式：&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方式 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array1 ;</span><br><span class=\"line\">        array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];      <span class=\"comment\">// 指定数组大小和类型，初始值都是0 或false 或null</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            array1[i] = i * <span class=\"number\">10</span>;  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n方式2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];   </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            array1[i] = i * <span class=\"number\">10</span>;  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n方式3&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array3 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;     <span class=\"comment\">// 不指定具体大小，直接初始化数组的值，方式2的简化方法，不需要new int[] 直接添加&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;for each 遍历数组&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-数组特点\"><a href=\"#2-数组特点\" class=\"headerlink\" title=\"2.数组特点\"></a>2.数组特点</h4><ul>\n<li>Java数组一旦创建，不能修改大小</li>\n<li>数组创建后会被分配默认值，整型为0，浮点型为0.0，布尔型为false，<em>对象为null</em></li>\n</ul>\n<h4 id=\"3-数组的基本使用\"><a href=\"#3-数组的基本使用\" class=\"headerlink\" title=\"3.数组的基本使用\"></a>3.数组的基本使用</h4><h5 id=\"3-1-索引\"><a href=\"#3-1-索引\" class=\"headerlink\" title=\"3.1 索引\"></a>3.1 索引</h5><p>若要使用数组，可以根据索引使用。数组索引从0开始，列如10个元素的开始，索引为0~9<br>数组是引用类型，如果索引超出最大范围，则会报错</p>\n<h5 id=\"3-2-遍历\"><a href=\"#3-2-遍历\" class=\"headerlink\" title=\"3.2 遍历\"></a>3.2 遍历</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.println(array[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;for each 遍历数组&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : array2) &#123;</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-3-数组的本质\"><a href=\"#3-3-数组的本质\" class=\"headerlink\" title=\"3.3 数组的本质\"></a>3.3 数组的本质</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] array1;</span><br><span class=\"line\">array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">System.out.println(array1);     <span class=\"comment\">// [I@f6f4d33</span></span><br><span class=\"line\">array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">System.out.println(array1);     <span class=\"comment\">// [I@23fc625e</span></span><br></pre></td></tr></table></figure>\n<p>数组是引用类型，通过变量名指向数组，如果有新数组，可以用这个变量名再指向新的数组</p>\n<h5 id=\"3-4-排序\"><a href=\"#3-4-排序\" class=\"headerlink\" title=\"3.4 排序\"></a>3.4 排序</h5><p>排序方法有很多种，例如，冒泡排序，快速排序，插入排序等等，这部分涉及到算法<br>在java中利用Arrays.sort()方法就可以排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] array = &#123;<span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">54</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>[] array2 = &#123;<span class=\"number\">111</span>, <span class=\"number\">21</span>, <span class=\"number\">31</span>, <span class=\"number\">14</span>, <span class=\"number\">16</span>, -<span class=\"number\">2</span>, -<span class=\"number\">54</span>, <span class=\"number\">102</span>&#125;;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br><span class=\"line\"></span><br><span class=\"line\">Arrays.sort(array);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;排序后：&quot;</span>);</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n<p><strong>注意:该方法是修改了数组本身</strong></p>\n<h4 id=\"4-多维数组\"><a href=\"#4-多维数组\" class=\"headerlink\" title=\"4.多维数组\"></a>4.多维数组</h4><p>列如二维数组，就是数组中的数组，最外层的一个数组中，每一个元素都是一个数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] ns = &#123;</span><br><span class=\"line\">            &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span> &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(ns.length); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"evernotecid://4110DA82-EE74-493A-AC6E-7D2C24DDBBB9/appyinxiangcom/27405091/ENResource/p6\" alt=\"34c2c5919f0c554c3f580ec0309ae484.png\"></p>\n","excerpt":"","more":"<h3 id=\"一、Java介绍\"><a href=\"#一、Java介绍\" class=\"headerlink\" title=\"一、Java介绍\"></a>一、Java介绍</h3><h3 id=\"二、变量和数据类型\"><a href=\"#二、变量和数据类型\" class=\"headerlink\" title=\"二、变量和数据类型\"></a>二、变量和数据类型</h3><h4 id=\"1-变量的类型\"><a href=\"#1-变量的类型\" class=\"headerlink\" title=\"1.变量的类型\"></a>1.变量的类型</h4><ul>\n<li>基本类型的变量</li>\n<li>引用类型的变量</li>\n</ul>\n<p>变量必须先定义，后使用，定义时可以先给一个初始值，如果没有初始值，java会给默认值</p>\n<h4 id=\"2-基本数据类型\"><a href=\"#2-基本数据类型\" class=\"headerlink\" title=\"2.基本数据类型\"></a>2.基本数据类型</h4><ul>\n<li>整数类型：byte，short，int，long</li>\n<li>浮点类型：float，double</li>\n<li>字符类型：char</li>\n<li>布尔类型：boolean</li>\n</ul>\n<h5 id=\"各数据类型占用字节数\"><a href=\"#各数据类型占用字节数\" class=\"headerlink\" title=\"各数据类型占用字节数\"></a>各数据类型占用字节数</h5><p>![image-20210513145429125](&#x2F;Users&#x2F;laohangdeche&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210513145429125.png)</p>\n<h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）<br>各种整型能表示的最大范围如下：</p>\n<ul>\n<li>byte：-128 ~ 127</li>\n<li>short: -32768 ~ 32767</li>\n<li>int: -2147483648 ~ 2147483647</li>\n<li>long: -9223372036854775808 ~ 9223372036854775807</li>\n</ul>\n<p><strong>注意：</strong>同一个数的不同进制的表示是完全相同的，long型需要在数据后面加上L</p>\n<h4 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h4><ul>\n<li>浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x10^2，也可以表示成1.2345x10^3，所以称为浮点数</li>\n<li>对于<code>float</code>类型，需要加上<code>f</code>后缀。</li>\n<li>浮点数可表示的范围非常大，<code>float</code>类型可最大表示3.4x10^38，而<code>double</code>类型可最大表示1.79x10^308</li>\n</ul>\n<h4 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h4><p>布尔类型只有true和false两种类型，Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把<code>boolean</code>表示为4字节整数。</p>\n<h4 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h4><ul>\n<li>字符类型<code>char</code>表示一个字符，用单引号’’括起来。Java的<code>char</code>类型除了可表示标准的ASCII外，还可以表示一个Unicode字符</li>\n<li>java使用Unicode表示字符，要显示Unicode编码，可以将字符，赋值给int类型</li>\n<li>还可以直接用转义字符<code>\\u</code>+Unicode编码来表示一个字符</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">zh</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;中&#x27;</span>;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(zh);</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> zh;</span><br><span class=\"line\">        System.out.println(a1);     <span class=\"comment\">// 65</span></span><br><span class=\"line\">        System.out.println(a2);     <span class=\"comment\">// 20013</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0041&#x27;</span>; \t\t\t\t<span class=\"comment\">// &#x27;A&#x27;，因为十六进制0041 = 十进制65</span></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u4e2d&#x27;</span>; \t\t\t\t<span class=\"comment\">// &#x27;中&#x27;，因为十六进制4e2d = 十进制20013</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-引用类型\"><a href=\"#3-引用类型\" class=\"headerlink\" title=\"3. 引用类型\"></a>3. 引用类型</h3><h4 id=\"3-1-字符串\"><a href=\"#3-1-字符串\" class=\"headerlink\" title=\"3.1 字符串\"></a>3.1 字符串</h4><p>区别于单引号的字符，字符串是用双引号括起来的，引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-1转义字符\"><a href=\"#3-1-1转义字符\" class=\"headerlink\" title=\"3.1.1转义字符\"></a>3.1.1转义字符</h5><p>\\ 是转义字符，要表示该符号，需要两个\\\\表示一个\\字符</p>\n<p><strong>常见的转义字符</strong></p>\n<ul>\n<li><code>\\&quot;</code> 表示字符<code>&quot;</code></li>\n<li><code>\\&#39;</code> 表示字符<code>&#39;</code></li>\n<li><code>\\\\</code> 表示字符<code>\\</code></li>\n<li><code>\\n</code> 表示换行符</li>\n<li><code>\\r</code> 表示回车符</li>\n<li><code>\\t</code> 表示Tab</li>\n<li><code>\\u####</code> 表示一个Unicode编码的字符</li>\n</ul>\n<h5 id=\"3-1-2-字符串拼接\"><a href=\"#3-1-2-字符串拼接\" class=\"headerlink\" title=\"3.1.2 字符串拼接\"></a>3.1.2 字符串拼接</h5><p>java中可以使用 + 连接任意字符串和数据类型，如果连接了其他数据类型，那么会先转换成字符串，再连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;age is &quot;</span> + age;</span><br><span class=\"line\">        System.out.println(s); <span class=\"comment\">// age is25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-3-多行字符串\"><a href=\"#3-1-3-多行字符串\" class=\"headerlink\" title=\"3.1.3 多行字符串\"></a>3.1.3 多行字符串</h5><h5 id=\"3-1-4-不可变特性\"><a href=\"#3-1-4-不可变特性\" class=\"headerlink\" title=\"3.1.4 不可变特性\"></a>3.1.4 不可变特性</h5><p>字符串的内容是不可变的，但指向是可变的</p>\n<h4 id=\"3-2-常量\"><a href=\"#3-2-常量\" class=\"headerlink\" title=\"3.2 常量\"></a>3.2 常量</h4><p>常量在第一次定义赋值后，就不能再次修改了，再次赋值会导致编译错误</p>\n<p>通常常量前会，用一个final修饰符，根据习惯，常量通常都为大写字母</p>\n<h4 id=\"3-3-var关键字\"><a href=\"#3-3-var关键字\" class=\"headerlink\" title=\"3.3 var关键字\"></a>3.3 var关键字</h4><p>有些时候，类型名字太长了，写起来比较麻烦，比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder·s = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这个时候如果想省略变量类型，可以使用var关键字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-变量的作用范围\"><a href=\"#4-变量的作用范围\" class=\"headerlink\" title=\"4.变量的作用范围\"></a>4.变量的作用范围</h3><p>在Java中，变量的作用域一般在它所在的{}中，从定义处开始，到语句块结束，超出了作用域引用这些变量，编译器会报错</p>\n<h3 id=\"5-null\"><a href=\"#5-null\" class=\"headerlink\" title=\"5.null\"></a>5.null</h3><ul>\n<li>引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象</li>\n<li>注意要区分空值null和空字符串””，空字符串是一个有效的字符串对象，它不等于null</li>\n</ul>\n<h3 id=\"三、流程控制\"><a href=\"#三、流程控制\" class=\"headerlink\" title=\"三、流程控制\"></a>三、流程控制</h3><h4 id=\"1-if判断\"><a href=\"#1-if判断\" class=\"headerlink\" title=\"1.if判断\"></a>1.if判断</h4><ul>\n<li>根据条件是true还是false，决定是否执行下面的某一段代码</li>\n<li>可以使用 if……else if……else来串联，else if较多时，要注意条件的顺序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfSwitch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入成绩：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀了&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">80</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格了&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没及格&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>注意：</strong> 当只有一行语句时，可以省略花括号，但不建议这么写，容易出错</li>\n</ul>\n<h5 id=\"判断引用类型相等\"><a href=\"#判断引用类型相等\" class=\"headerlink\" title=\"判断引用类型相等\"></a>判断引用类型相等</h5><ul>\n<li>在判断基本类型时，可以直接使用&#x3D;&#x3D;，但是在判断引用类型的变量是否相等时，&#x3D;&#x3D; 表示“该引用是否相等”，或者说，是否指向了同一个对象</li>\n<li>若想判断两个引用对象的内容是否相等，则需要用到equals() 方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断引用类型是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">quoteEquals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i1 == i2)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;True&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;False&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hang&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;HANG&quot;</span>.toLowerCase();</span><br><span class=\"line\">        System.out.println(s1);     <span class=\"comment\">// hang</span></span><br><span class=\"line\">        System.out.println(s2);     <span class=\"comment\">// hang</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// different quote</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1 == s2)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;same quote&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;different quote&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// same word</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1.equals(s2))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;same word&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;different word&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：执行语句<code>s1.equals(s2)</code>时，如果变量<code>s1</code>为<code>null</code>，会报<code>NullPointerException</code>：</strong></p>\n<p>避免报空指针的错误，可以把一定不是null的对象放在前面，因为java中，任何对象都可以调用equals()方法</p>\n<h4 id=\"2-循环\"><a href=\"#2-循环\" class=\"headerlink\" title=\"2.循环\"></a>2.循环</h4><p>在计算机中，需要重复执行某一段代码，在条件满足时，重复执行；在条件不满足下，退出循环。</p>\n<h5 id=\"2-1-while循环\"><a href=\"#2-1-while循环\" class=\"headerlink\" title=\"2.1 while循环\"></a>2.1 while循环</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(条件)&#123;</span><br><span class=\"line\">  循环体...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>while循环在执行时，先判断括号里的条件，如果为true，执行循环体内的代码。如果为false，直接跳到循环体末尾，执行下面的代码</p>\n<h5 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a>死循环</h5><ul>\n<li>循环要有退出条件，如果条件永远为true，那整个循环语句便会一直运行下去，导致占用100%的CPU资源，导致电脑运行缓慢</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 死循环</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  System.out.println(i):</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-do-while-循环\"><a href=\"#2-2-do-while-循环\" class=\"headerlink\" title=\"2.2 do while 循环\"></a>2.2 do while 循环</h5><ul>\n<li>while 循环是先判断条件，再执行循环体</li>\n<li>do while 循环是先执行一次循环体，再判断条件，即至少会执行一次</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// do while 循环</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">doWhile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (i&lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// do while 至少执行一次循环体内的代码</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            s += n;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (n&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(s);      <span class=\"comment\">// 只加一次，输出1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-for-循环\"><a href=\"#2-3-for-循环\" class=\"headerlink\" title=\"2.3 for 循环\"></a>2.3 for 循环</h5><p><code>for</code>循环的功能非常强大，它使用计数器实现循环。<code>for</code>循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。计数器变量通常命名为<code>i</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for循环</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">forLoop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);    <span class=\"comment\">// 5050</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for-each-循环\"><a href=\"#for-each-循环\" class=\"headerlink\" title=\"for each 循环\"></a>for each 循环</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ns = &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n : ns) &#123;</span><br><span class=\"line\">            System.out.println(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"练习：利用for循环计算圆周率\"><a href=\"#练习：利用for循环计算圆周率\" class=\"headerlink\" title=\"练习：利用for循环计算圆周率\"></a>练习：利用for循环计算圆周率</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">circlePi</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 圆周率π可以使用公式计算：</span></span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">double</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i% <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pi = pi + <span class=\"number\">1</span> / (<span class=\"number\">2</span> * i -<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pi = pi - <span class=\"number\">1</span> / (<span class=\"number\">2</span> * i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pi = pi * <span class=\"number\">4</span>;</span><br><span class=\"line\">        System.out.println(pi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-break和continue\"><a href=\"#3-break和continue\" class=\"headerlink\" title=\"3.break和continue\"></a>3.break和continue</h4><p>在for 循环 和 while 循环中，可以利用这两个关键字，中断或跳过某段程序</p>\n<ul>\n<li>break，中断整个循环，继续执行循环下方的代码，break语句总是跳出最近的一层循环</li>\n<li>continue，跳过当前循环，继续执行下一次循环</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">breakAndContinue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// break，终止循环</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;i&lt;= <span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只计算到50</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum += i ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// continue，跳过当前循环</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只计算奇数,跳过偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-switch选择\"><a href=\"#4-switch选择\" class=\"headerlink\" title=\"4.switch选择\"></a>4.switch选择</h4><p>switch，可以根据条件的具体结果，分别去执行不同的分支</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// switch语法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 1&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 2&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select 3&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;选错了&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>case后面没有花括号{}</li>\n<li>每个case需要添加break，忘记写break，语句会穿透下去，直到遇到break或者执行到最后一句</li>\n</ul>\n<h5 id=\"java12-中switch表达式的新写法\"><a href=\"#java12-中switch表达式的新写法\" class=\"headerlink\" title=\"java12 中switch表达式的新写法\"></a>java12 中switch表达式的新写法</h5><ul>\n<li>使用箭头语法，类似lambda表达式</li>\n<li>可以不需要添加break语句</li>\n<li>case 多个条件可以写在一行</li>\n<li>switch语句可以用yield 生成返回值，这个时候，switch块最后要加分号</li>\n<li>箭头语法下，如果条件大于一条，要用{}括起来</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">fruit</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;apple&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (fruit)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span> -&gt; System.out.println(<span class=\"string\">&quot;select apple&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;pear&quot;</span> -&gt; System.out.println(<span class=\"string\">&quot;select pear&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;mongo&quot;</span>,<span class=\"string\">&quot;test&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select mango&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;good choice&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; System.out.println(<span class=\"string\">&quot;no fruit select&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用yield 生成返回值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">fruit1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mongo&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (fruit1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span> -&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;pear&quot;</span> -&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;mongo&quot;</span>,<span class=\"string\">&quot;test&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;select mango&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;good choice&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"四、数组\"><a href=\"#四、数组\" class=\"headerlink\" title=\"四、数组\"></a>四、数组</h3><h4 id=\"1-数组的三种定义方法\"><a href=\"#1-数组的三种定义方法\" class=\"headerlink\" title=\"1.数组的三种定义方法\"></a>1.数组的三种定义方法</h4><ul>\n<li>先声明，再分配空间，再赋值</li>\n<li>先声明并分配空间，再赋值</li>\n<li>声明并分配空间然后赋值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">aArray</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;创建数组的三种方式：&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方式 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array1 ;</span><br><span class=\"line\">        array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];      <span class=\"comment\">// 指定数组大小和类型，初始值都是0 或false 或null</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            array1[i] = i * <span class=\"number\">10</span>;  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n方式2&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];   </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            array1[i] = i * <span class=\"number\">10</span>;  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n方式3&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array3 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;     <span class=\"comment\">// 不指定具体大小，直接初始化数组的值，方式2的简化方法，不需要new int[] 直接添加&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;for each 遍历数组&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-数组特点\"><a href=\"#2-数组特点\" class=\"headerlink\" title=\"2.数组特点\"></a>2.数组特点</h4><ul>\n<li>Java数组一旦创建，不能修改大小</li>\n<li>数组创建后会被分配默认值，整型为0，浮点型为0.0，布尔型为false，<em>对象为null</em></li>\n</ul>\n<h4 id=\"3-数组的基本使用\"><a href=\"#3-数组的基本使用\" class=\"headerlink\" title=\"3.数组的基本使用\"></a>3.数组的基本使用</h4><h5 id=\"3-1-索引\"><a href=\"#3-1-索引\" class=\"headerlink\" title=\"3.1 索引\"></a>3.1 索引</h5><p>若要使用数组，可以根据索引使用。数组索引从0开始，列如10个元素的开始，索引为0~9<br>数组是引用类型，如果索引超出最大范围，则会报错</p>\n<h5 id=\"3-2-遍历\"><a href=\"#3-2-遍历\" class=\"headerlink\" title=\"3.2 遍历\"></a>3.2 遍历</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.println(array[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;for each 遍历数组&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : array2) &#123;</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-3-数组的本质\"><a href=\"#3-3-数组的本质\" class=\"headerlink\" title=\"3.3 数组的本质\"></a>3.3 数组的本质</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] array1;</span><br><span class=\"line\">array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">System.out.println(array1);     <span class=\"comment\">// [I@f6f4d33</span></span><br><span class=\"line\">array1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">System.out.println(array1);     <span class=\"comment\">// [I@23fc625e</span></span><br></pre></td></tr></table></figure>\n<p>数组是引用类型，通过变量名指向数组，如果有新数组，可以用这个变量名再指向新的数组</p>\n<h5 id=\"3-4-排序\"><a href=\"#3-4-排序\" class=\"headerlink\" title=\"3.4 排序\"></a>3.4 排序</h5><p>排序方法有很多种，例如，冒泡排序，快速排序，插入排序等等，这部分涉及到算法<br>在java中利用Arrays.sort()方法就可以排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] array = &#123;<span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">13</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">54</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span>[] array2 = &#123;<span class=\"number\">111</span>, <span class=\"number\">21</span>, <span class=\"number\">31</span>, <span class=\"number\">14</span>, <span class=\"number\">16</span>, -<span class=\"number\">2</span>, -<span class=\"number\">54</span>, <span class=\"number\">102</span>&#125;;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;排序前：&quot;</span>);</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br><span class=\"line\"></span><br><span class=\"line\">Arrays.sort(array);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;排序后：&quot;</span>);</span><br><span class=\"line\">System.out.println(array);</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n<p><strong>注意:该方法是修改了数组本身</strong></p>\n<h4 id=\"4-多维数组\"><a href=\"#4-多维数组\" class=\"headerlink\" title=\"4.多维数组\"></a>4.多维数组</h4><p>列如二维数组，就是数组中的数组，最外层的一个数组中，每一个元素都是一个数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] ns = &#123;</span><br><span class=\"line\">            &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span> &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(ns.length); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"evernotecid://4110DA82-EE74-493A-AC6E-7D2C24DDBBB9/appyinxiangcom/27405091/ENResource/p6\" alt=\"34c2c5919f0c554c3f580ec0309ae484.png\"></p>\n"},{"title":"测试","date":"2025-06-03T06:05:11.000Z","_content":"","source":"_posts/测试.md","raw":"---\ntitle: 测试\ndate: 2025-06-03 14:05:11\ntags:\n---\n","slug":"测试","published":1,"updated":"2025-06-03T06:11:30.441Z","comments":1,"layout":"post","photos":[],"_id":"cmbg4h16p0001b31ghrrr4dzs","content":"","excerpt":"","more":""},{"title":"测试2","date":"2025-06-03T06:24:51.000Z","_content":"","source":"_posts/测试2.md","raw":"---\ntitle: 测试2\ndate: 2025-06-03 14:24:51\ntags:\n---\n","slug":"测试2","published":1,"updated":"2025-06-03T06:28:32.308Z","comments":1,"layout":"post","photos":[],"_id":"cmbg571qm0000h81g98h09myn","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}